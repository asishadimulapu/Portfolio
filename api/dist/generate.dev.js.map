{"version":3,"sources":["generate.js"],"names":["handler","request","response","method","status","json","message","prompt","body","error","apiKey","process","env","GEMINI_API_KEY","apiUrl","payload","contents","role","parts","text","generationConfig","responseMimeType","fetch","headers","JSON","stringify","geminiResponse","ok","errorText","console","data"],"mappings":";;;;;;;AAAA;AAEe,SAAeA,OAAf,CAAuBC,OAAvB,EAAgCC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAETD,OAAO,CAACE,MAAR,KAAmB,MAFV;AAAA;AAAA;AAAA;;AAAA,2CAGJD,QAAQ,CAACE,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAA1B,CAHI;;AAAA;AAMb;AACQC,UAAAA,MAPK,GAOMN,OAAO,CAACO,IAPd,CAOLD,MAPK;;AAAA,cASRA,MATQ;AAAA;AAAA;AAAA;;AAAA,2CAUJL,QAAQ,CAACE,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEI,YAAAA,KAAK,EAAE;AAAT,WAA1B,CAVI;;AAAA;AAab;AACMC,UAAAA,MAdO,GAcEC,OAAO,CAACC,GAAR,CAAYC,cAdd;;AAAA,cAgBRH,MAhBQ;AAAA;AAAA;AAAA;;AAAA,2CAiBHR,QAAQ,CAACE,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEI,YAAAA,KAAK,EAAE;AAAT,WAA1B,CAjBG;;AAAA;AAoBPK,UAAAA,MApBO,0GAoBkGJ,MApBlG,GAsBb;;AACMK,UAAAA,OAvBO,GAuBG;AACdC,YAAAA,QAAQ,EAAE,CAAC;AAAEC,cAAAA,IAAI,EAAE,MAAR;AAAgBC,cAAAA,KAAK,EAAE,CAAC;AAAEC,gBAAAA,IAAI,EAAEZ;AAAR,eAAD;AAAvB,aAAD,CADI;AAEda,YAAAA,gBAAgB,EAAE;AAChBC,cAAAA,gBAAgB,EAAE;AADF;AAFJ,WAvBH,EA8Bb;;AA9Ba;AAAA;AAAA,0CAgCkBC,KAAK,CAACR,MAAD,EAAS;AACzCX,YAAAA,MAAM,EAAE,MADiC;AAEzCoB,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT,aAFgC;AAKzCf,YAAAA,IAAI,EAAEgB,IAAI,CAACC,SAAL,CAAeV,OAAf;AALmC,WAAT,CAhCvB;;AAAA;AAgCLW,UAAAA,cAhCK;;AAAA,cAwCNA,cAAc,CAACC,EAxCT;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAyCeD,cAAc,CAACP,IAAf,EAzCf;;AAAA;AAyCHS,UAAAA,SAzCG;AA0CTC,UAAAA,OAAO,CAACpB,KAAR,CAAc,mBAAd,EAAmCmB,SAAnC;AA1CS,2CA2CF1B,QAAQ,CAACE,MAAT,CAAgBsB,cAAc,CAACtB,MAA/B,EAAuCC,IAAvC,CAA4C;AAAEI,YAAAA,KAAK,8BAAuBmB,SAAvB;AAAP,WAA5C,CA3CE;;AAAA;AAAA;AAAA,0CA8CQF,cAAc,CAACrB,IAAf,EA9CR;;AAAA;AA8CLyB,UAAAA,IA9CK;AAgDX;AACA5B,UAAAA,QAAQ,CAACE,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0ByB,IAA1B;AAjDW;AAAA;;AAAA;AAAA;AAAA;AAoDXD,UAAAA,OAAO,CAACpB,KAAR,CAAc,wBAAd;AACAP,UAAAA,QAAQ,CAACE,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEI,YAAAA,KAAK,EAAE;AAAT,WAA1B;;AArDW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// This is a Vercel Serverless Function that acts as a secure proxy to the Gemini API.\r\n\r\nexport default async function handler(request, response) {\r\n  // 1. We only allow POST requests to this function.\r\n  if (request.method !== 'POST') {\r\n    return response.status(405).json({ message: 'Method Not Allowed' });\r\n  }\r\n\r\n  // 2. Get the prompt from the request body sent by the browser.\r\n  const { prompt } = request.body;\r\n\r\n  if (!prompt) {\r\n    return response.status(400).json({ error: 'Prompt is required' });\r\n  }\r\n  \r\n  // 3. Get the secret API key from Vercel's Environment Variables.\r\n  const apiKey = process.env.GEMINI_API_KEY;\r\n\r\n  if (!apiKey) {\r\n     return response.status(500).json({ error: 'API key is not configured.' });\r\n  }\r\n\r\n  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n  // 4. Construct the payload to send to the Gemini API.\r\n  const payload = {\r\n    contents: [{ role: \"user\", parts: [{ text: prompt }] }],\r\n    generationConfig: {\r\n      responseMimeType: \"application/json\",\r\n    }\r\n  };\r\n\r\n  // 5. Make the secure, server-to-server API call to Gemini.\r\n  try {\r\n    const geminiResponse = await fetch(apiUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!geminiResponse.ok) {\r\n      const errorText = await geminiResponse.text();\r\n      console.error('Gemini API Error:', errorText);\r\n      return response.status(geminiResponse.status).json({ error: `Gemini API error: ${errorText}` });\r\n    }\r\n\r\n    const data = await geminiResponse.json();\r\n    \r\n    // 6. Send the response from Gemini back to the browser.\r\n    response.status(200).json(data);\r\n\r\n  } catch (error) {\r\n    console.error('Internal Server Error:', error);\r\n    response.status(500).json({ error: 'Failed to fetch from Gemini API' });\r\n  }\r\n}\r\n"],"file":"generate.dev.js"}
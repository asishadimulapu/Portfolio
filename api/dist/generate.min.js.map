{"version":3,"sources":["generate.js"],"names":["handler","request","response","prompt","apiKey","apiUrl","payload","geminiResponse","errorText","data","regeneratorRuntime","async","_context","prev","next","method","abrupt","status","json","message","body","error","process","env","GEMINI_API_KEY","concat","contents","role","parts","text","generationConfig","responseMimeType","awrap","fetch","headers","Content-Type","JSON","stringify","sent","ok","console","t0","stop"],"mappings":"aAEe,SAAeA,QAAQC,EAASC,GAAhC,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAEU,SAAnBb,EAAQc,OAFC,OAAAH,EAAAI,OAAA,SAGJd,EAASe,OAAO,KAAKC,KAAK,CAAEC,QAAS,wBAHjCP,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,GAAAX,EAAAF,EAAAmB,KAAAjB,OAAA,CAAAS,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SAAAd,EAAAe,OAAA,KAAAC,KAAA,CAAAG,MAAA,wBAAA,KAAA,EAAA,GAAAjB,EAAAkB,QAAAC,IAAAC,eAAA,CAAAZ,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SAAAd,EAAAe,OAAA,KAAAC,KAAA,CAAAG,MAGJnB,gCAHI,KAAA,EAAA,OAoBPG,EApBO,gGAAAoB,OAoBkGrB,GAbvGD,EAPK,CAwBXuB,SAAU,CAAC,CAAEC,KAAM,OAAQC,MAAO,CAAC,CAAEC,KAAM1B,MAxBhC2B,iBAAA,CAAAC,iBAAA,qBAAAnB,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAsB,MAAAC,MAAA5B,EAAA,CAiCTU,OAAQ,OAjCCmB,QAAA,CAabC,eAAA,oBAwBIf,KAAMgB,KAAKC,UAAU/B,MArCZ,KAAA,GAAA,IAUsBC,EAVtBK,EAAA0B,MAAAC,GAAA,CAAA3B,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAsB,MAAAzB,EAAAsB,QAAA,KAAA,GAAA,OAAArB,EAAAI,EAAA0B,KA0CTE,QAAQnB,MAAM,oBAAqBb,GA1C1BI,EAAAI,OAAA,SAAAd,EAAAe,OAAAV,EAiBHL,QAASe,KAAAA,CAAOI,MAAKH,qBAAAA,OAAKV,MAjBvB,KAAA,GAAA,OAAAI,EAAAE,KAAA,GAAAJ,mBAAAsB,MA8CQzB,EAAeW,QA9CvB,KAAA,GA8CLT,EA9CKG,EAAA0B,KAiDXpC,EAASe,OAAO,KAAKC,KAAKT,GAjDfG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAA6B,GAAA7B,EAAA,MAAA,IAwBEe,QAAAA,MAAI,yBAAJA,EAAAA,IAAcC,EAAAA,OAAK,KAAGV,KAAA,CAAAG,MAAA,oCAxBxB,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAA8B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA","file":"generate.min.js","sourcesContent":["// This is a Vercel Serverless Function that acts as a secure proxy to the Gemini API.\r\n\r\nexport default async function handler(request, response) {\r\n  // 1. We only allow POST requests to this function.\r\n  if (request.method !== 'POST') {\r\n    return response.status(405).json({ message: 'Method Not Allowed' });\r\n  }\r\n\r\n  // 2. Get the prompt from the request body sent by the browser.\r\n  const { prompt } = request.body;\r\n\r\n  if (!prompt) {\r\n    return response.status(400).json({ error: 'Prompt is required' });\r\n  }\r\n  \r\n  // 3. Get the secret API key from Vercel's Environment Variables.\r\n  const apiKey = process.env.GEMINI_API_KEY;\r\n\r\n  if (!apiKey) {\r\n     return response.status(500).json({ error: 'API key is not configured.' });\r\n  }\r\n\r\n  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n  // 4. Construct the payload to send to the Gemini API.\r\n  const payload = {\r\n    contents: [{ role: \"user\", parts: [{ text: prompt }] }],\r\n    generationConfig: {\r\n      responseMimeType: \"application/json\",\r\n    }\r\n  };\r\n\r\n  // 5. Make the secure, server-to-server API call to Gemini.\r\n  try {\r\n    const geminiResponse = await fetch(apiUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!geminiResponse.ok) {\r\n      const errorText = await geminiResponse.text();\r\n      console.error('Gemini API Error:', errorText);\r\n      return response.status(geminiResponse.status).json({ error: `Gemini API error: ${errorText}` });\r\n    }\r\n\r\n    const data = await geminiResponse.json();\r\n    \r\n    // 6. Send the response from Gemini back to the browser.\r\n    response.status(200).json(data);\r\n\r\n  } catch (error) {\r\n    console.error('Internal Server Error:', error);\r\n    response.status(500).json({ error: 'Failed to fetch from Gemini API' });\r\n  }\r\n}\r\n"]}